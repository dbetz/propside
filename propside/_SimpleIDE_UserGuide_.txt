This is a .zipped demo of a PropGCC Simple IDE (Side).

Side User Guide Notes:

Propeller-GCC Simple IDE (Side)

  The Simple IDE is designed for building Propeller-GCC programs. Simple should mean simple and easy for users, and I think this is achieved with the IDE. There are some things that need improvement because simple in this case also means easy for the programmer. At this time only a Windows version is published, but Linux/Mac programs have been compiled and run.


This User Guide is not comprehensive, but it describes using basic features where necessary.


Simple IDE features:

- Windows Installer.
- Menu Bar with File, Project, Edit, Debug, and Help.
- Tool Bar with most Menu Bar operations.
- Project manager area for project file settings.
- Compiler area for setting build attributes.
- Tabbed text editor.
- Project build status pane.
- Status bar showing compile size, brief messages, and build progress.
- Board type and COM port selector.


Windows Installer:

  The windows installer is about 72MB and contains both the Propeller-GCC tool-chain and the Simple IDE. The installer will ask the user for directories and other info for setup. The installer makes the package ready to use in one simple process.


Running the IDE for the first time:

  A properties dialog will usually start the first time. In most cases, it will already have the fields properly set. Please make a note of the fields and click Ok when ready. These properties may be changed to allow using another compiler directory by clicking the tool-bar wrench.

A "Hello" demo should be loaded the first time the program starts. Whatever project/program is loaded when you exit the IDE will be the project the IDE loads on next start-up.


Running the Hello Demo:

  To run the Hello demo, you must have a suitable board type selected, and the right COM port selected, and have a Propeller board connected. The demo should start with a simple board type like "HUB" or "ASC".

The default board type "ASC" will be good enough for most 80MHz Propeller board tests. A more generic HUB board type is available if you like - there is practically no difference for simple programs like hello except for the clock type like available on the SPINSTAMP.

If the top-right combo box near the refresh symbol is blank, insert your Propeller USB connected board and click refresh.

Some default board types are available such as SPINSTAMP in the board combo box.

If you do not have an 80MHz Propeller board, you can make your own board type and set the clock frequency (typically crystal frequency times PLLx mode). Assuming C:\propgcc is your installation directory:

1. Copy the C:propgcc\propeller-load\hub.cfg to propgcc\propeller-load\yourboard.cfg
2. Change clock frequency in yourboard.cfg, and save the file.
3. Click the Jigsaw puzzle piece button near to reload the board types.
4. Choose YOURBOARD from the combobox.

Now, you can click the "Run Console" or "Play" button (triangle on blue background circle) to rebuild, load the program, and start the terminal. The terminal will show "Hello World ..." after the program starts.


Running a new project:

  There are two ways to start a new project:

Option 1: New Project

1. Choose Menu->Project->New Project or press the New Project tool button.
2. Enter your project name. The name will be added to the folder path.
3. Click the folder browse button to select a new folder.

When you press OK to finish the New Project dialog the folder/project name will be created for you if does not exist already. A main program template will be added for your new project.

Option 2: Close All, start new.

1. Choose Menu->File->Close all to close all open editors and the side project.
2. Choose Menu->File->Save As to rename the "untitled" editor tab.
3. Choose Menu->Project->Set Project
4. Fill in new main program with code below (please do not copy/paste the [code] tags).

[code]
#include <propeller.h>

int main(int argc, char* argv[])
{
    int mask = 0x3fffffff;
    DIRA = mask;
    for(;;) {
        OUTA ^= DIRA;
        waitcnt(CLKFREQ/2+CNT);
    } 
    return 0;
}
[/code]


Using Menu->Project->Set Project will set the project name to the editor tab filename. Set Project saves the project properties to the current state.

After setting up your project, click the hammer button to build your program. There should be no warnings or errors. If you see a warning or error, click on that line in the build output and it will take you to the problem area in the editor in most cases. Check your code there for typos. 

If you did copy/paste the [code] tags for example you might see the message below. Click the error message and remove the line from the editor panel.

blink.c:1:1: error: expected identifier or '(' before '[' token


Using the IDE:

  Many of the features of the IDE will be familiar to new users. Some features need a little explanation.

  File Menu:

  - New: creates a new file called "untitled" in the tabbed editor space.

  - Open: opens an existing file in the tabbed editor space.

  - Save: saves the tabbed editor text to the filename in shown on the tab.

  - Save As: saves the current tabbed editor text to another filename.

  - Close: closes the currently visible tabbed editor.

  - Close All: closes all files and projects.

  - Previous file names: lists the last 5 opened files.

  - Exit: exits the program.


  Project Menu:

  - New Project: opens a dialog for creating a new project "name" in "folder/name" selected by user. If the folder does not exist, it is created. Project name will be added to the folder by the program.

  - Open Project: opens an existing project file with extention .side

  - Save and Close Project: projects are always saved before they are closed.

  - Set Project. The function of the set project button (F4 or Project->Set Project) has been discussed in the example above. Please review that section if you haven't already.

  - Properies. This item or associated button with bring up the properties menu which was discussed in the first time use section.


  Edit Menu:

  - Copy: copies selected editor text to the clip-board.

  - Cut: copies selected editor text to the clip-board and deletes text.

  - Paste: pastes text from clipboard to the editor at cursor.

  - Find: finds text in the editor from the starting point to the end of file.

  - Find Next: finds the next occurance of text.

  - Find Previous: finds the previous occurance of text.

  - Replace: opens a dialog with find and replace tools that allows for optional whole word and case sensitive find and replace.

  - Go Back: this goes back to the file place where a find function started.

  - Find Function: used to find a function implementation from a function call. This and Go Back make up a source browser.

  - Redo: undoes the last undo.

  - Undo: reverses the last edit.


  Debug Menu:

  - Run Console. Build, load, and run program on Propeller RAM (or external memory for XMM). Opens a console terminal.

  - Build. Build program only.

  - Burn. Build and load program to Propeller EEPROM (and external flash for XMM).

  - Run. Build, load, and run program on Propeller RAM (or external flash for XMM).


Top Right-hand Side GUI Elements:

  - Board Type. This is the combo box on the left side. It lets you choose the board type to use with your program.

  - Reload Board Type. This jigsaw piece button will read all C:\propgcc\propeller-load\*.cfg files and load the names into the Board Type combo box.

  - Serial Port. This is the combo box on the right. It lets you choose the port to use where your board is attached.

  - Port Refresh. You must click the refresh button every time you change port connections.

  - Terminal Connect. A "display" button. Press to show and connect terminal to the selected port. If pressed (square around the button), it is connected and you can disconnect by pressing the button again.


Project Pane:

  The project pane is blank if no project is set. If a project is set, the project name with .side will be displayed. The first indented entry is the main program. It should have the main startup function.

To see a file, left click on the file-name. Clicking the .side file does nothing.

To add new files to the project, right click on the main program filename (or another if listed). When you add a file to the project, it must already exist somewhere on your computer. You can make a new file in the editor and save-as for example. If you choose a file outside of the project directory, the file will be copied to the directory.

To delete a file from the project, right click on the file and choose delete. Do not delete the top file - it has a special meaning. If you want another top file, create it and set the project.


Compiler Pane:

  The compiler pane lets you choose typical Propeller-GCC compile options. These options are global, that is they are not saved in the .side project file at this time.

  - Compiler Type. C compiles C programs and can compile very simple C++ programs such as the C++_toggle demo. C programs needing std namespace and libraries, etc... will need to use the C++ compiler. Typially a full C++ program will need an external memory to be useful.

  -- Memory Mode. Many programs use LMM, but some programs use COG or XMMC. The C-VGA demo is a COG only program. To compile that, use the COG memory mode. Some programs are too big for LMM and can be run on external memory modes like XMMC. The included graphics demo can run on LMM, but it can also run on XMMC with board type EEPROM selected (64KB or more EEPROM should be used).

  -- Optimization. Typically we want to optimize for size, but there are some programs that we want to optimize for speed. Typically we use -O2 Speed for benchmarks such as fft.

  -- Math Lib. Must be checked if you are using float or double in your program. The program will compile without this, but it will not run.

  -- Pthread Lib. Must be checked if you are using Pthreads for running multiple threaded programs in one COG or many COGs. The number of threads available is limited by memory. XMM/XMMC programs will run all threads on the main program cog.

  -- Simple Printf. GCC's default printf is very big (up to 20KB). Simple printf provides most of the default printf features and is fine for most programs although it is not standard compliant. Simple printf programs using integers only can be as small as about 7KB so there is great advantage in using it on Propeller.

  -- Warn All. Tells compiler to generate all possible warnings (some exceptions).

  -- No Fcache. Tells compiler to not use Fast Cache (fcache). Fcache generally improves performance but can be disabled.

  -- Exceptions. Enabled for C++ programs that use try/catch exceptions.

  -- 32bit Double. Use 32bit doubles for floating point double variables. The default is 64bit doubles, and may be too big for most LMM programs.

  -- Strip ELF. Use this check box to ensure the Compiled status is reported correctly when no debug info is necessary in the program.

  -- Other Compiler Options Box. This lets you add -D flags for programs that may need them. For example the dry11 demo needs " -DLOOP=50000 " (without parenthesis) to compile correctly. Enter that flag for building dry11.

  -- Other Linker Options Box. This lets you add linker specific options. For example " -T xmmc_ram.ld " would be added to run XMMC programs on SRAM/SDRAM only boards.
  

Miscellaneous notes:

  The editor will convert "tabs" to spaces. The built-in setting for tabs is 4 spaces. If you need tabs, use another editor.


Future enhancements:

  -- Add AUTO serial port management.

  -- Others as necessary.


Program Challenges (room for improvement):

  - New project seems a little clunky. A wizard would allow separating the project name and folder selection.


Fixed bugs:

  It has been noted that sometimes when the serial port is closed by the terminal or using the display Terminal Connect button that the program will eat lots of CPU time. When you suspect this is happening, just clicking the Connect button to open then close the port should make the program use less CPU time.

